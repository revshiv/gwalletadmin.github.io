{"version":3,"sources":["components/login/LoginApiUrls.js","components/login/Login.js","components/dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["loginUrl","developmentUrl","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChangeEmail","event","setState","email","target","value","trim","validateEmail","state","emailRequired","handleChangePassword","password","validatePassword","passwordRequired","login","asyncToGenerator","regenerator_default","a","mark","_callee","requestBody","wrap","_context","prev","next","loader","userName","axios","post","then","response","alertify","success","catch","error","message","stop","react_default","createElement","react","className","data-text","data-blink","id","type","autoFocus","placeholder","onChange","Button_default","variant","color","style","width","onClick","Component","Dashboard","set","theme","createMuiTheme","palette","primary","main","secondary","App","MuiThemeProvider_default","react_router_dom","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+VAEaA,EAAWC,iDC4GTC,cArGX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAWVQ,kBAAoB,SAACC,GACjBR,EAAKS,SAAS,CAACC,MAAOF,EAAMG,OAAOC,MAAMC,QAAS,WAC9Cb,EAAKc,mBAdMd,EAkBnBc,cAAgB,WACa,KAArBd,EAAKe,MAAML,MACXV,EAAKS,SAAS,CAACO,eAAe,IAE9BhB,EAAKS,SAAS,CAACO,eAAe,KAtBnBhB,EA0BnBiB,qBAAuB,SAACT,GACpBR,EAAKS,SAAS,CAACS,SAAUV,EAAMG,OAAOC,MAAMC,QAAS,WACjDb,EAAKmB,sBA5BMnB,EAgCnBmB,iBAAmB,WACa,KAAxBnB,EAAKe,MAAMG,SACXlB,EAAKS,SAAS,CAACW,kBAAkB,IAEjCpB,EAAKS,SAAS,CAACW,kBAAkB,KApCtBpB,EAwCnBqB,MAxCmBpB,OAAAqB,EAAA,EAAArB,CAAAsB,EAAAC,EAAAC,KAwCX,SAAAC,IAAA,IAAAC,EAAA,OAAAJ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAEE/B,EAAKc,gBAFP,cAAAe,EAAAE,KAAA,EAGE/B,EAAKmB,mBAHP,OAKCnB,EAAKe,MAAMC,eAAkBhB,EAAKe,MAAMK,mBACzCpB,EAAKS,SAAS,CAACuB,QAAQ,IACjBL,EAAc,CAChBM,SAAUjC,EAAKe,MAAML,MACrBQ,SAAUlB,EAAKe,MAAMG,UAEzBgB,IAAMC,KAAKvC,EAAU+B,GAChBS,KAAK,SAACC,GACHrC,EAAKS,SAAS,CAACC,MAAO,GAAIQ,SAAU,KACpCoB,IAASC,QAAQ,oBACjBvC,EAAKS,SAAS,CAACuB,QAAQ,MAE1BQ,MAAM,SAACC,GACJzC,EAAKS,SAAS,CAACS,SAAU,KACrBuB,EAAMJ,SAAN,KAAuBzB,MACvB0B,IAASG,MAAMA,EAAMJ,SAAN,KAAuBzB,OAEtC0B,IAASG,MAAMA,EAAMJ,SAAN,KAAuBK,SAE1C1C,EAAKS,SAAS,CAACuB,QAAQ,OAxB/B,wBAAAH,EAAAc,SAAAjB,MArCJ1B,EAAKe,MAAQ,CACTL,MAAO,GACPQ,SAAU,GACVF,eAAe,EACfI,kBAAkB,EAClBY,QAAQ,GARGhC,wEAsEf,OACI4C,EAAApB,EAAAqB,cAACC,EAAA,SAAD,KACK3C,KAAKY,MAAMiB,OACRY,EAAApB,EAAAqB,cAAA,OAAKE,UAAU,kCAAkCC,YAAU,iBAAiBC,cAAA,EACvEC,GAAG,uBAA8B,KAC1CN,EAAApB,EAAAqB,cAAA,OAAKE,UAAU,iCACXH,EAAApB,EAAAqB,cAAA,OAAKE,UAAU,aACXH,EAAApB,EAAAqB,cAAA,MAAIE,UAAU,+BAAd,eACAH,EAAApB,EAAAqB,cAAA,OAAKE,UAAU,cACXH,EAAApB,EAAAqB,cAAA,SAAOM,KAAK,OAAOJ,UAAU,2BAA2BK,WAAW,EAAMC,YAAY,QAC9EC,SAAUnD,KAAKI,kBAAmBK,MAAOT,KAAKY,MAAML,QAC1DP,KAAKY,MAAMC,cAAgB4B,EAAApB,EAAAqB,cAAA,OAAKE,UAAU,qBAAf,kBAA0D,MAE1FH,EAAApB,EAAAqB,cAAA,OAAKE,UAAU,cACXH,EAAApB,EAAAqB,cAAA,SAAOM,KAAK,WAAWJ,UAAU,2BAA2BM,YAAY,WACjEC,SAAUnD,KAAKc,qBAAsBL,MAAOT,KAAKY,MAAMG,WAC7Df,KAAKY,MAAMK,iBACRwB,EAAApB,EAAAqB,cAAA,OAAKE,UAAU,qBAAf,qBAA6D,MAErEH,EAAApB,EAAAqB,cAAA,OAAKE,UAAU,oBACXH,EAAApB,EAAAqB,cAACU,EAAA/B,EAAD,CAAQgC,QAAQ,YAAYC,MAAM,YAAYC,MAAO,CAACC,MAAO,OAAQC,QAASzD,KAAKkB,OAAnF,oBA5FRwC,aCKLC,mLARP,OACIlB,EAAApB,EAAAqB,cAAA,+BAHYgB,2BCSxBvB,IAASyB,IAAI,WAAY,WAAY,aAErC,IAAMC,EAAQC,yBAAe,CACzBC,QAAS,CACLC,QAAS,CACLC,KAAM,WAEVC,UAAW,CACPD,KAAM,cAoBHE,mLAbP,OACI1B,EAAApB,EAAAqB,cAAC0B,EAAA/C,EAAD,CAAkBwC,MAAOA,GACrBpB,EAAApB,EAAAqB,cAAC2B,EAAA,EAAD,KACI5B,EAAApB,EAAAqB,cAACC,EAAA,SAAD,KACIF,EAAApB,EAAAqB,cAAC4B,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW9E,IACjC8C,EAAApB,EAAAqB,cAAC4B,EAAA,EAAD,CAAOC,KAAK,aAAaC,OAAK,EAACC,UAAWd,cAPhDD,aCZEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAApB,EAAAqB,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrD,KAAK,SAAAsD,GACjCA,EAAaC","file":"static/js/main.0690fa18.chunk.js","sourcesContent":["import {developmentUrl} from \"../config/baseUrl\";\n\nexport const loginUrl = developmentUrl + 'AdminUser/SignIn';\n","import React, {Component, Fragment} from 'react';\nimport './Login.css'\nimport Button from \"@material-ui/core/Button\";\nimport axios from 'axios';\nimport alertify from 'alertifyjs'\nimport {loginUrl} from \"./LoginApiUrls\";\n\nclass Login extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            email: '',\n            password: '',\n            emailRequired: false,\n            passwordRequired: false,\n            loader: false\n        }\n    }\n\n    handleChangeEmail = (event) => {\n        this.setState({email: event.target.value.trim()}, () => {\n            this.validateEmail()\n        });\n    };\n\n    validateEmail = () => {\n        if (this.state.email === '') {\n            this.setState({emailRequired: true})\n        } else {\n            this.setState({emailRequired: false})\n        }\n    };\n\n    handleChangePassword = (event) => {\n        this.setState({password: event.target.value.trim()}, () => {\n            this.validatePassword()\n        });\n    };\n\n    validatePassword = () => {\n        if (this.state.password === '') {\n            this.setState({passwordRequired: true})\n        } else {\n            this.setState({passwordRequired: false})\n        }\n    };\n\n    login = async () => {\n\n        await this.validateEmail();\n        await this.validatePassword();\n\n        if (!this.state.emailRequired && !this.state.passwordRequired) {\n            this.setState({loader: true});\n            const requestBody = {\n                userName: this.state.email,\n                password: this.state.password\n            };\n            axios.post(loginUrl, requestBody)\n                .then((response) => {\n                    this.setState({email: '', password: ''});\n                    alertify.success('Login successful');\n                    this.setState({loader: false})\n                })\n                .catch((error) => {\n                    this.setState({password: ''});\n                    if (error.response['data'].value) {\n                        alertify.error(error.response['data'].value)\n                    } else {\n                        alertify.error(error.response['data'].message)\n                    }\n                    this.setState({loader: false})\n                })\n        }\n    };\n\n    render() {\n        return (\n            <Fragment>\n                {this.state.loader ?\n                    <div className=\"loader loader-default is-active\" data-text=\"Please wait...\" data-blink\n                         id=\"registrationLoader\"></div> : null}\n                <div className=\"d-flex justify-content-center\">\n                    <div className=\"login-box\">\n                        <h4 className=\"text-center text-white mb-4\">ADMIN LOGIN</h4>\n                        <div className=\"form-group\">\n                            <input type=\"text\" className=\"form-control login-input\" autoFocus={true} placeholder=\"Email\"\n                                   onChange={this.handleChangeEmail} value={this.state.email}/>\n                            {this.state.emailRequired ? <div className=\"text text-warning\">Email required</div> : null}\n                        </div>\n                        <div className=\"form-group\">\n                            <input type=\"password\" className=\"form-control login-input\" placeholder=\"Password\"\n                                   onChange={this.handleChangePassword} value={this.state.password}/>\n                            {this.state.passwordRequired ?\n                                <div className=\"text text-warning\">Password required</div> : null}\n                        </div>\n                        <div className=\"pt-2 text-center\">\n                            <Button variant=\"contained\" color=\"secondary\" style={{width: '30%'}} onClick={this.login}>\n                                Login\n                            </Button>\n                        </div>\n                    </div>\n                </div>\n            </Fragment>\n        );\n    }\n}\n\nexport default Login;\n","import React, {Component} from 'react';\n\nclass Dashboard extends Component {\n    render() {\n        return (\n            <div>\n                Dashboard\n            </div>\n        );\n    }\n}\n\nexport default Dashboard;\n","import React, {Component, Fragment} from 'react';\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport {createMuiTheme} from '@material-ui/core/styles';\nimport MuiThemeProvider from \"@material-ui/core/styles/MuiThemeProvider\";\nimport Login from \"./components/login/Login\";\nimport Dashboard from \"./components/dashboard/Dashboard\";\nimport alertify from 'alertifyjs';\n\nimport './assets/css/bootstrap.css'\nimport './assets/css/loader.css'\n\nalertify.set('notifier', 'position', 'top-right');\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#FFFFFF'\n        },\n        secondary: {\n            main: '#FF4500',\n        },\n    },\n});\n\nclass App extends Component {\n    render() {\n        return (\n            <MuiThemeProvider theme={theme}>\n                <BrowserRouter>\n                    <Fragment>\n                        <Route path=\"/\" exact component={Login}/>\n                        <Route path=\"/dashboard\" exact component={Dashboard}/>\n                    </Fragment>\n                </BrowserRouter>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}